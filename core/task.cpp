#include <tuple>
#include <map>
#include <iostream>
#include <fstream>

#include <string>

#include "task.hpp"

namespace core {
  std::map<std::string, uint8_t> bytes_map {
    { "à", 1 }, { "À", 2 }, { "á", 3 }, { "Á", 4 }, { "â", 5 }, { "Â", 6 }, { "ã", 7 }, { "Ã", 8 }, { "ä", 9 }, { "Ä", 10 }, { "å", 11 }, { "Å", 12 }, { "¸", 13 }, { "¨", 14 }, { "æ", 15 }, { "Æ", 16 }, { "ç", 17 }, { "Ç", 18 }, { "è", 19 }, { "È", 20 }, { "é", 21 }, { "É", 22 }, { "ê", 23 }, { "Ê", 24 }, { "ë", 25 }, { "Ë", 26 }, { "ì", 27 }, { "Ì", 28 }, { "í", 29 }, { "Í", 30 }, { "î", 31 }, { "Î", 32 }, { "ï", 33 }, { "Ï", 34 }, { "ð", 35 }, { "Ð", 36 }, { "ñ", 37 }, { "Ñ", 38 }, { "ò", 39 }, { "Ò", 40 }, { "ó", 41 }, { "Ó", 42 }, { "ô", 43 }, { "Ô", 44 }, { "õ", 45 }, { "Õ", 46 }, { "ö", 47 }, { "Ö", 48 }, { "÷", 49 }, { "×", 50 }, { "ø", 51 }, { "Ø", 52 }, { "ù", 53 }, { "Ù", 54 }, { "ú", 55 }, { "Ú", 56 }, { "û", 57 }, { "Û", 58 }, { "ü", 59 }, { "Ü", 60 }, { "ý", 61 }, { "Ý", 62 }, { "þ", 63 }, { "Þ", 64 }, { "ÿ", 65 }, { "ß", 66 }, { "³", 67 }, { "²", 68 }, { "¿", 69 }, { "¯", 70 }, { "º", 71 }, { "ª", 72 }, { "a", 73 }, { "A", 74 }, { "b", 75 }, { "B", 76 }, { "c", 77 }, { "C", 78 }, { "d", 79 }, { "D", 80 }, { "e", 81 }, { "E", 82 }, { "f", 83 }, { "F", 84 }, { "g", 85 }, { "G", 86 }, { "h", 87 }, { "H", 88 }, { "i", 89 }, { "I", 90 }, { "j", 91 }, { "J", 92 }, { "k", 93 }, { "K", 94 }, { "l", 95 }, { "L", 96 }, { "m", 97 }, { "M", 98 }, { "n", 99 }, { "N", 100 }, { "o", 101 }, { "O", 102 }, { "p", 103 }, { "P", 104 }, { "q", 105 }, { "Q", 106 }, { "r", 107 }, { "R", 108 }, { "s", 109 }, { "S", 110 }, { "t", 111 }, { "T", 112 }, { "u", 113 }, { "U", 114 }, { "v", 115 }, { "V", 116 }, { "w", 117 }, { "W", 118 }, { "x", 119 }, { "X", 120 }, { "y", 121 }, { "Y", 122 }, { "z", 123 }, { "Z", 124 }
  };
  std::map<uint8_t, std::string> symbols_map {
    { 1, "à" }, { 2, "À" }, { 3, "á" }, { 4, "Á" }, { 5, "â" }, { 6, "Â" }, { 7, "ã" }, { 8, "Ã" }, { 9, "ä" }, { 10, "Ä" }, { 11, "å" }, { 12, "Å" }, { 13, "¸" }, { 14, "¨" }, { 15, "æ" }, { 16, "Æ" }, { 17, "ç" }, { 18, "Ç" }, { 19, "è" }, { 20, "È" }, { 21, "é" }, { 22, "É" }, { 23, "ê" }, { 24, "Ê" }, { 25, "ë" }, { 26, "Ë" }, { 27, "ì" }, { 28, "Ì" }, { 29, "í" }, { 30, "Í" }, { 31, "î" }, { 32, "Î" }, { 33, "ï" }, { 34, "Ï" }, { 35, "ð" }, { 36, "Ð" }, { 37, "ñ" }, { 38, "Ñ" }, { 39, "ò" }, { 40, "Ò" }, { 41, "ó" }, { 42, "Ó" }, { 43, "ô" }, { 44, "Ô" }, { 45, "õ" }, { 46, "Õ" }, { 47, "ö" }, { 48, "Ö" }, { 49, "÷" }, { 50, "×" }, { 51, "ø" }, { 52, "Ø" }, { 53, "ù" }, { 54, "Ù" }, { 55, "ú" }, { 56, "Ú" }, { 57, "û" }, { 58, "Û" }, { 59, "ü" }, { 60, "Ü" }, { 61, "ý" }, { 62, "Ý" }, { 63, "þ" }, { 64, "Þ" }, { 65, "ÿ" }, { 66, "ß" }, { 67, "³" }, { 68, "²" }, { 69, "¿" }, { 70, "¯" }, { 71, "º" }, { 72, "ª" }, { 73, "a" }, { 74, "A" }, { 75, "b" }, { 76, "B" }, { 77, "c" }, { 78, "C" }, { 79, "d" }, { 80, "D" }, { 81, "e" }, { 82, "E" }, { 83, "f" }, { 84, "F" }, { 85, "g" }, { 86, "G" }, { 87, "h" }, { 88, "H" }, { 89, "i" }, { 90, "I" }, { 91, "j" }, { 92, "J" }, { 93, "k" }, { 94, "K" }, { 95, "l" }, { 96, "L" }, { 97, "m" }, { 98, "M" }, { 99, "n" }, { 100, "N" }, { 101, "o" }, { 102, "O" }, { 103, "p" }, { 104, "P" }, { 105, "q" }, { 106, "Q" }, { 107, "r" }, { 108, "R" }, { 109, "s" }, { 110, "S" }, { 111, "t" }, { 112, "T" }, { 113, "u" }, { 114, "U" }, { 115, "v" }, { 116, "V" }, { 117, "w" }, { 118, "W" }, { 119, "x" }, { 120, "X" }, { 121, "y" }, { 122, "Y" }, { 123, "z" }, { 124, "Z" }
  };

  int firstof(const unsigned char data[], const unsigned char &c, int i = 0) {
    auto const s = sizeof(data) / sizeof(data[0]);
    if (i >= s) return -1;
    if (i == s - 1 && data[i] == c) return i;
    while (i < s) {
      if (data[i] == c) return i;
      i++;
    }
    return -1;
  }
  
  Task Task::Parse(const std::filesystem::directory_entry &entry) {
    std::ifstream file(entry.path(), std::ios::binary);
    uint8_t bytes;
    TaskStatus status;
    bool hasInfo;
    bool hasSubtasks;
    {
      unsigned char conf[]{};
      file.read(reinterpret_cast<char*>(&conf), 2);
      file.seekg(2);
      bytes = static_cast<uint16_t>(conf[0]) / 8;
      auto &b = conf[1];
      status = static_cast<TaskStatus>(static_cast<uint8_t>(b & 0x03) - 1);
      b >>= 2;
      hasInfo = (b & 0x01) == 1;
      b >>= 1;
      hasInfo = b == 1;
    }
    
    std::string name, info;
    
    std::vector<Task> subtasks{};
    
    switch (static_cast<unsigned char>(hasInfo) << 1 | hasSubtasks) {
    case 0b00: {
      file.seekg(0, std::ios::end);
      std::streamsize end = file.tellg();
      end -= 2;
      file.seekg(2);
      unsigned char buff[]{};
      file.read(reinterpret_cast<char*>(&buff), end);
      for (auto const &s : buff) {
	name += symbols_map[s];
      }
      break;
    }
    case 0b11: {
      
    }
    }
    
    return { name, info, subtasks, status };
  }
}
